stages:
    - build
    - publish

default:
    # Only the build stage actually requires a `virt` tagged runner, the rest can use `docker`
    tags:
        - docker

variables:
    # The absolute URL to the template bucket
    TEMPLATE_PATH: "${OBJECTS_ENDPOINT}/${OBJECTS_BUCKET}/${CI_COMMIT_REF_NAME}"

# This job template defines the build for a single OS template
# The rules attached here make sure that templates are only (re)build on changes to their or shared files.
.build_template:
    stage: build
    tags:
        - virt
        - packer
    artifacts:
        paths:
            - build_${TEMPLATE_NAME}/
    script:
        - make build NAME=${TEMPLATE_NAME}
    rules:
        - changes:
            - .gitlab-ci.yml
            - Makefile
            - bin/*
            - files/**/${TEMPLATE_NAME}.*
            - generic/*
            - templates/${TEMPLATE_NAME}.json
            - tpl/*

# Publish a built template by uploading it to an S3 bucket, the objects are prefixed with the name of the branch/tag
.upload_template:
    stage: publish
    image: "ubuntu:20.04"
    script:
        - apt-get update
        - apt-get -y install s3cmd curl
        - touch /root/.s3cfg
        - s3cmd --no-ssl --access_key="${OBJECTS_ACCESS_KEY}" --secret_key="${OBJECTS_SECRET_KEY}" --host-bucket="%(bucket)s.${OBJECTS_HOST}" --host="${OBJECTS_HOST}" put -P build_${TEMPLATE_NAME}/${TEMPLATE_NAME}.json s3://${OBJECTS_BUCKET}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.json
        - s3cmd --no-ssl --access_key="${OBJECTS_ACCESS_KEY}" --secret_key="${OBJECTS_SECRET_KEY}" --host-bucket="%(bucket)s.${OBJECTS_HOST}" --host="${OBJECTS_HOST}" put -P build_${TEMPLATE_NAME}/${TEMPLATE_NAME}.checksum s3://${OBJECTS_BUCKET}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.checksum
        - s3cmd --no-ssl --access_key="${OBJECTS_ACCESS_KEY}" --secret_key="${OBJECTS_SECRET_KEY}" --host-bucket="%(bucket)s.${OBJECTS_HOST}" --host="${OBJECTS_HOST}" put -P build_${TEMPLATE_NAME}/${TEMPLATE_NAME}.qcow2 s3://${OBJECTS_BUCKET}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.qcow2
        - sleep 5
        - curl -I http://${OBJECTS_BUCKET}.${OBJECTS_HOST}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.checksum
        - curl -I http://${OBJECTS_BUCKET}.${OBJECTS_HOST}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.json
        - curl -I http://${OBJECTS_BUCKET}.${OBJECTS_HOST}/templates/${TEMPLATE_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.qcow2


# Centos 7.8
build:centos-7.8:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "centos-7.8"

publish:centos-7.8:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "centos-7.8"

# Centos 8.2
build:centos-8.2:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "centos-8.2"

publish:centos-8.2:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "centos-8.2"

## Debian 10
build:debian-10:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "debian-10"

publish:debian-10:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "debian-10"

## Ubuntu 16.04
build:ubuntu-16.04:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "ubuntu-16.04"

publish:ubuntu-16.04:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "ubuntu-16.04"

## Ubuntu 18.04
build:ubuntu-18.04:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "ubuntu-18.04"

publish:ubuntu-18.04:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "ubuntu-18.04"

## Ubuntu 20.04
build:ubuntu-20.04:
    extends: .build_template
    variables:
        TEMPLATE_NAME: "ubuntu-20.04"

publish:ubuntu-20.04:
    extends: .upload_template
    variables:
        TEMPLATE_NAME: "ubuntu-20.04"
